import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_squared_error

df = pd.read_csv("ipl_data.csv")
df = df.drop(columns=["mid", "date", "batsman", "bowler"], axis=1)

df["overs"] = pd.to_numeric(df["overs"], errors="coerce").astype(int)

df = pd.get_dummies(df, columns=["bat_team", "bowl_team", "venue"], drop_first=True)

df = df.apply(pd.to_numeric, errors='coerce')
df = df.dropna()

X_raw = df.drop(columns=["total"])
y_raw = df["total"].values.reshape(-1, 1)  # Convert to 2D array for scaling

scaler_x = MinMaxScaler()
scaler_y = MinMaxScaler()

X_scaled = scaler_x.fit_transform(X_raw)
y_scaled = scaler_y.fit_transform(y_raw)

X, y = np.array(X_scaled), np.array(y_scaled)

SEQ_LEN = 10
X_seq, y_seq = [], []

for i in range(len(X) - SEQ_LEN):
    X_seq.append(X[i:i+SEQ_LEN])
    y_seq.append(y[i+SEQ_LEN])

X_seq, y_seq = np.array(X_seq), np.array(y_seq)

X_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, random_state=42)

model = Sequential([
    LSTM(128, return_sequences=True, input_shape=(SEQ_LEN, X_train.shape[2])),
    Dropout(0.2),
    LSTM(64, return_sequences=False),
    Dropout(0.2),
    Dense(32, activation="relu"),
    Dense(1)
])

model.compile(optimizer="adam", loss="mse")

model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=32)

y_pred = model.predict(X_test)

y_pred_actual = scaler_y.inverse_transform(y_pred.reshape(-1, 1)).flatten()
y_test_actual = scaler_y.inverse_transform(y_test.reshape(-1, 1)).flatten()

rmse = np.sqrt(mean_squared_error(y_test_actual, y_pred_actual))
mae = mean_absolute_error(y_test_actual, y_pred_actual)

mape = np.mean(np.abs((y_test_actual - y_pred_actual) / y_test_actual)) * 100
accuracy = 100 - mape

print(f"ðŸ“Š RMSE: {rmse:.4f}, MAE: {mae:.4f}")
print(f"âœ… Model Accuracy: {accuracy:.2f}%")

plt.figure(figsize=(10, 6))
plt.plot(y_test_actual[:50], label="Actual", marker="o")
plt.plot(y_pred_actual[:50], label="Predicted", marker="x")
plt.xlabel("Sample Index")
plt.ylabel("Total Score (Actual)")
plt.title("Actual vs. Predicted Total Scores")
plt.legend()
plt.show()

